<#+
// <copyright file="AppServiceTemplate.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class ApiControllerTemplate : CSharpTemplate
{
     private DbTable _model;
     private MyConfig _config;
     public ApiControllerTemplate(DbTable model,MyConfig config)
     {
         _model=model;
         _config=config;
     }
	public override string TransformText()
	{
#>
namespace <#=_config.NameSpace #>
{
    using GridData.Core;
    using Microsoft.AspNetCore.Mvc;
    using My.D3.Application.AppServices.<#=StringUtil.GetModuleName(_config.NameSpace) #>;
    using My.D3.Application.Framework.Dto;
    using My.D3.Configurations;
    using My.D3.Entity.<#=StringUtil.GetModuleName(_config.NameSpace) #>.Dto;
    using My.D3.Entity.<#=StringUtil.GetModuleName(_config.NameSpace) #>.View;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    /// <summary>
    /// <#=_model.TableDesc #>接口
    /// </summary>
    [MyVersion("<#=StringUtil.GetModuleName(_config.NameSpace) #>")]
    [Route("api/[controller]")]
    [ApiController]
    public class API<#=StringUtil.ToCase(_model.TableName) #>Controller : ControllerBase
    {
       private readonly I<#=StringUtil.ToCase(_model.TableName) #>AppService _<#=StringUtil.ToFLower(_model.TableName) #>AppService;

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="<#=StringUtil.ToFLower(_model.TableName) #>AppService"></param>
        public API<#=StringUtil.ToCase(_model.TableName) #>Controller(I<#=StringUtil.ToCase(_model.TableName) #>AppService <#=StringUtil.ToFLower(_model.TableName) #>AppService)
        {
            this._<#=StringUtil.ToFLower(_model.TableName) #>AppService = <#=StringUtil.ToFLower(_model.TableName) #>AppService;
        }

        /// <summary>
        /// 获取单个  [<#=_model.TableDesc #>]  的dto
        /// </summary>
        /// <param name="id">主键</param>
        /// <returns>单个对象的dto</returns>
        [HttpPost("GetDto")]
        public async Task<<#=StringUtil.ToCase(_model.TableName) #>Dto> GetDto(<#=_model.CShareType #> id)
        {
            var dto = await this._<#=StringUtil.ToFLower(_model.TableName) #>AppService.GetDto(id);
            return await Task.FromResult(dto);
        }

        /// <summary>
        /// 获取单个  [应用系统表] 视图的dto
        /// </summary>
        /// <param name="id">主键</param>
        /// <returns>单个对象的dto</returns>
        [HttpPost("GetViewDto")]
        public async Task<View<#=StringUtil.ToCase(_model.TableName) #>> GetViewDto(Guid id)
        {
            var dto = await this._<#=StringUtil.ToFLower(_model.TableName) #>AppService.GetViewDto(id);
            return dto;
        }

        /// <summary>
        /// 获取  [应用系统表] 视图分页的信息
        /// </summary>
        /// <param name="pagedInputDto">分页输入的Dto</param>
        /// <returns>分页信息</returns>
        [HttpPost("GetViewPage")]
        public async Task<MyPagedResult<View<#=StringUtil.ToCase(_model.TableName) #>>> GetViewPage(PagedInputDto pagedInputDto)
        {
            var pagedResult = await this._<#=StringUtil.ToFLower(_model.TableName) #>AppService.GetViewPage(pagedInputDto);
            return pagedResult;
        }

        /// <summary>
        /// 获取  [应用系统表] 分页的信息
        /// </summary>
        /// <param name="pagedInputDto">分页输入的Dto</param>
        /// <returns>分页信息</returns>
        [HttpPost("GetPage")]
        public async Task<MyPagedResult<<#=StringUtil.ToCase(_model.TableName) #>Dto>> GetPage(PagedInputDto pagedInputDto)
        {
            var pagedResult = await this._<#=StringUtil.ToFLower(_model.TableName) #>AppService.GetPage(pagedInputDto);
            return pagedResult;
        }

        /// <summary>
        /// 获取 [应用系统表] 的所有信息
        /// </summary>
        /// <returns>list集合</returns>
        [HttpPost("GetAllListDto")]
        public async Task<List<<#=StringUtil.ToCase(_model.TableName) #>Dto>> GetAllListDto()
        {
            var listResult = await this._<#=StringUtil.ToFLower(_model.TableName) #>AppService.GetAllListDto();
            return listResult;
        }

        /// <summary>
        /// 创建  [应用系统表]
        /// </summary>
        /// <param name="input">创建输入实体</param>
        /// <returns>输出dto</returns>
        [HttpPost("CreateByDto")]
        public async Task<<#=StringUtil.ToCase(_model.TableName) #>Dto> CreateByDto(<#=StringUtil.ToCase(_model.TableName) #>Dto input)
        {
            var dto = await this._<#=StringUtil.ToFLower(_model.TableName) #>AppService.CreateByDto(input);
            return dto;
        }

        /// <summary>
        /// 更新  [应用系统表]
        /// </summary>
        /// <param name="input">更新的实体的对象</param>
        /// <returns>更新后的对象</returns>
        [HttpPost("UpdateByDto")]
        public async Task<<#=StringUtil.ToCase(_model.TableName) #>Dto> UpdateByDto(<#=StringUtil.ToCase(_model.TableName) #>Dto input)
        {
            var dto = await this._<#=StringUtil.ToFLower(_model.TableName) #>AppService.UpdateByDto(input);
            return dto;
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        /// <param name="deleteDto"></param>
        /// <returns></returns>
        [HttpPost("BatchDelete")]
        public async Task BatchDelete(DeleteDto deleteDto)
        {
            await this._<#=StringUtil.ToFLower(_model.TableName) #>AppService.BatchDelete(deleteDto);
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
