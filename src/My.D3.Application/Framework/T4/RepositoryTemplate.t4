<#+
// <copyright file="RepositoryTemplate.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class RepositoryTemplate : CSharpTemplate
{
     private DbTable _model;
     private MyConfig _config;
     public RepositoryTemplate(DbTable model,MyConfig config)
     {
         _model=model;
         _config=config;
     }

	public override string TransformText()
	{
#>
namespace  <#=_config.NameSpace #>
{
    using AutoMapper;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using My.D3.DataAccess.Framework;
    using My.D3.Entity.<#=StringUtil.GetModuleName(_config.NameSpace) #>;
    using My.D3.Entity.<#=StringUtil.GetModuleName(_config.NameSpace) #>.Dto;
    using My.D3.Entity.<#=StringUtil.GetModuleName(_config.NameSpace) #>.View;

    /// <summary>
    /// <#=_model.TableDesc #>仓储接口
    /// </summary>
    public class <#=StringUtil.ToCase(_model.TableName) #>Repository : RepositoriesBase<<#=StringUtil.ToCase(_model.TableName) #>Entity,  <#=_model.CShareType #>, <#=StringUtil.ToCase(_model.TableName) #>Dto, View<#=StringUtil.ToCase(_model.TableName) #>>, I<#=StringUtil.ToCase(_model.TableName) #>Repository
    {      
        private readonly IDbContextProvider<MyDbContext> _dbContextProvider;
        private readonly IMapper _mapper;

        /// <summary>
        /// 构造函数
        /// </summary>
        public <#=StringUtil.ToCase(_model.TableName) #>Repository(IDbContextProvider<MyDbContext> _dbContextProvider, IMapper mapper) : base(_dbContextProvider, mapper)
        {
            this._dbContextProvider = _dbContextProvider;
            this._mapper = mapper;
        }

    }
}

<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
